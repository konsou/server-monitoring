#!/usr/bin/env python3
import subprocess
import sys
from typing import NamedTuple, Tuple, List

from tabulate import tabulate

from _discord import print_and_notify_discord
from _load_settings import _load_settings


class DeviceEntry(NamedTuple):
    # Mount point or zpool name
    name: str
    free_space: int
    ignored: bool = False


GB = 1024 * 1024
DEFAULT_ALERT_LIMIT = 50 * GB
IGNORED = -1
SETTINGS = _load_settings()


def _parse_and_filter_entries(entries: List[str]) -> Tuple[DeviceEntry, ...]:
    tmp_entries = []
    for e in entries:
        name, free_space = e.strip().split()
        name = name.strip()
        if name in SETTINGS.exclude_paths:
            tmp_entries.append(DeviceEntry(name, free_space=IGNORED, ignored=True))
        else:
            free_space = int(free_space.strip())
            tmp_entries.append(DeviceEntry(name, free_space=free_space, ignored=False))
    return tuple(tmp_entries)


def zpool_free_space() -> Tuple[DeviceEntry, ...]:
    try:
        entries = (
            subprocess.run(
                ["zpool", "list", "-Hp", "-o", "name,free"], stdout=subprocess.PIPE
            )
            .stdout.decode("utf-8")
            .splitlines()
        )
    except FileNotFoundError:
        # zfs not installed, zpool command not available
        return ()
    return _parse_and_filter_entries(entries)


def devices_free_space() -> Tuple[DeviceEntry, ...]:
    entries = (
        subprocess.run(
            [
                "df",
                "--output=target,avail",
                "--exclude-type=overlay",
                "--exclude-type=tmpfs",
                "--exclude-type=zfs",
            ],
            stdout=subprocess.PIPE,
        )
        .stdout.decode("utf-8")
        .splitlines()[1:]  # First line is captions
    )

    df_results = _parse_and_filter_entries(entries)
    zpool_results = zpool_free_space()
    return df_results + zpool_results


has_alerts = False
rows = [["Status", "Name", "Free", "Limit"]]
low_space_devices = []

free_space_entries = devices_free_space()
for entry in free_space_entries:
    if not entry:
        continue

    if entry.ignored:
        rows.append(["ignored", entry.name])
        continue

    alert_limit = SETTINGS.custom_alert_limits.get(entry.name, DEFAULT_ALERT_LIMIT)
    if entry.free_space < alert_limit:
        status = f"LOW SPACE"
        has_alerts = True
        low_space_devices.append(entry.name)
    else:
        status = f"ok"

    row = [
        status,
        entry.name,
        f"{entry.free_space / GB:.2f} GB",
        f"{alert_limit / GB:.2f} GB",
    ]
    rows.append(row)

if has_alerts:
    overall_status = f"ALERT - LOW DISK SPACE ON {', '.join(low_space_devices)}"
else:
    overall_status = "Disk space OK"

tabulated = tabulate(
    rows, headers="firstrow", colalign=("left", "left", "right", "right")
)
print_and_notify_discord(
    f"{overall_status}\n\n{tabulated}",
    has_alerts,
)
sys.exit(has_alerts)
